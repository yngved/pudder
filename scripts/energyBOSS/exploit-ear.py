##################################################################################
# Created on 25. jan. 2013
#
# @author: YND
#
# This script is an intermediate solution for starting usinng tomcat as 
# application server. The script will do the following (short summary): 
#
# 1. Download eboss-ear-1.3.0.0-SNAPSHOT.ear  
# 2. Extract ear: jar xf eboss-ear-1.3.0.0-SNAPSHOT.ear
# 3. Delete ejb: "del *ejb*
# 4. Extract eboss-web-1.3.0.0-SNAPSHOT.war
# 5. Delete "proxyfiles" in WEB-INF "del *-proxy-*
# 6. xcopy content of "ear" xcopy /y ..\*.jar WEB-INF\lib
# 7. Create a new archive (war): jar cvf eboss-web.war .
#
##################################################################################

from urllib.request import urlopen
from os import listdir
from zipfile import ZipFile
import os
import glob
import time

# Global variables
apiString = "api/python"
artifactString = "artifact/"
deployFolder = ""
hudsonUrl = "https://tr-w03.statoil.net:10945/jenkins-prod/"
jarExe = '"E:\\tfs\\DEVTOOLS\\jdk1.5.0_22\\bin\\jar.exe"'

# Global deployment variables
applicationName = "eboss"
artifactFolder = "E:\\tfs\\scripts\\energyBOSS\\jar"
artifactWarFile = "eboss-web.war"
deploydir = "deploy"

def fPrint(*text):
    import sys
    print (text)
    sys.stdout.flush()

# Method for running a command in command prompt
# Input: [cmd] = formated command
# Return: [none]
def runSystemCommand(cmd):  
  fPrint(cmd)
  os.system(cmd)    

def findBuiltJob(elements, buildNumber):
    if (buildNumber):
        buildUrl = elements["url"] + str(buildNumber) + "/"
    else:
        url = elements["url"] + apiString
        jobDesc = eval(urlopen(url).read())
        lastBuild = jobDesc["lastSuccessfulBuild"]
        buildUrl = lastBuild["url"]
    return buildUrl

def createArtefactUrl(elements, buildNumber):
    buildUrl = findBuiltJob(elements, buildNumber)
    buildDesc = eval(urlopen(buildUrl + apiString).read())
    artefacts = buildDesc["artifacts"]
    relativPath = artefacts[0]["relativePath"]
    fileName = artefacts[0]["fileName"]
    latestSuccessfulBuildURL = buildUrl + artifactString + relativPath
    return fileName, latestSuccessfulBuildURL

def createDestinationFolderPath(elements):
    return deployFolder + elements["name"] + "/"
    
def createDestinationZipFile(destinationFolder, fileName):
    import os
    d = os.path.dirname(destinationFolder)
    if not os.path.exists(d):
        os.makedirs(d)
    destFileName = destinationFolder + fileName
    file = open(destFileName, "wb")
    return file

def downloadNewArtefact(buildNumber, elements, destinationFolder):
    if(buildNumber and not buildNumber.isdigit()):
        fPrint ("Buildnumber needs to be an integer.")
        raise
    fileName, latestSuccessfulBuildURL = createArtefactUrl(elements, buildNumber)
    file = createDestinationZipFile(destinationFolder, fileName)
    fPrint("Downloading artefact.")
    file.write(urlopen(latestSuccessfulBuildURL).read());
    file.close
    fPrint("Filename: " + fileName)
    fPrint("Unzipping artefact " + file.name)
    return unzipFile(file.name, destinationFolder)

def readUnzipArtifact(job_name, buildNumber):
    husonResult = eval(urlopen(hudsonUrl + apiString).read())
    for elements in husonResult['jobs']:
            if elements["name"].lower() == job_name.lower():
                destinationFolder  = createDestinationFolderPath(elements)
                return downloadNewArtefact(buildNumber, elements, destinationFolder    )
                

def unzipFile(fileName, destinationFolder):
    ZipFile(fileName).extractall(destinationFolder)
    return  fileName.replace(".zip", "")
            
def doDeploy(environment, jobbName, buildNumber, workspace, artifactJarFile):    
    
    fPrint("Start doDeploy")
    os.chdir(workspace)    
    if not os.path.exists(deploydir):
      os.makedirs(deploydir)
    
    destinationFolder = readUnzipArtifact(jobbName, buildNumber)
    split = destinationFolder.split("/") 
    os.chdir(destinationFolder)
    earFile = glob.glob("*.ear")   
    
    directory = "eboss-web-ear"
    if not os.path.exists(directory):
      os.makedirs(directory)
    
    os.chdir(directory)    
    # Extract content of ear file
    fPrint("Extract content of ear file + earFile[0]")
    cmd = jarExe + " xf " + "..\\" + earFile[0] 
    runSystemCommand(cmd)   
    
    # Delete the *ejb* files
    cmd = "del *ejb*"
    runSystemCommand(cmd)
    
    warFile = glob.glob("*.war")
    directory = "eboss-web"
    if not os.path.exists(directory):
      os.makedirs(directory)
    
    os.chdir(directory)
    # Extract the content of the war file
    cmd = jarExe + " xf " + "..\\" + warFile[0]
    runSystemCommand(cmd)
    
    directory = "WEB-INF/lib"
    os.chdir(directory)
    # Delete the proxy files 
    cmd = "del *-proxy-*"
    runSystemCommand(cmd)
    
    # Copy all the jar files into current directory
    cmd = "xcopy /y ..\\..\\..\\*.jar ."
    runSystemCommand(cmd)
    
    cmd = "del CASCADE-*"
    runSystemCommand(cmd)
    
    cmd = "del eab-*.jar"
    runSystemCommand(cmd)
    
    os.chdir("..\\..")
    pwd = os.getcwd()
    
    cmd = "echo d | xcopy /y WEB-INF\\lib\\" + artifactJarFile +  "  " + artifactFolder
    runSystemCommand(cmd)
    
    temp_folder=artifactFolder + "\\temp"
    if not os.path.exists(temp_folder):
        os.makedirs(temp_folder)
    os.chdir(temp_folder)
    # Extract all files from jar
    cmd = jarExe + " xf " + artifactFolder +  "\\" + artifactJarFile
    runSystemCommand(cmd)
    
    fPrint("Copy ws-client.xml to " + temp_folder + "\\" + applicationName + "\\ws\client")
    cmd = "echo d | xcopy /y ..\\ws-client.xml " + applicationName + "\\ws\client"
    runSystemCommand(cmd)
    
    # create new archive (jar)
    cmd = jarExe + " cvf " + artifactJarFile + " ."
    runSystemCommand(cmd)    
    
    os.chdir(pwd)    
    cmd = "echo d | xcopy /y " + artifactFolder + "\\temp\\" + artifactJarFile + " WEB-INF\\lib"
    runSystemCommand(cmd)    
    
    fPrint("Standing directory, we will pack the war from here")
    fPrint(pwd)    
    
    # create new archive (war) and put it into Jenkins WORKSPACE directory
    cmd = jarExe + " cvf " + workspace + "\\deploy\\" + artifactWarFile + " ."       
    runSystemCommand(cmd)               

def main():
    import sys
    fPrint (sys.stdout)
    import os
    # Get variables from the jenkins build job
    environment =os.environ.get("TARGET_ENV")
    jobName = os.environ.get("BRANCH_DEPLOY")
    buildNumber = os.environ.get("BUILD_NUMBER")
    workspace = os.environ.get("WORKSPACE")
    artifactJarFile = os.environ.get("VERSION")
    fPrint(workspace)
    fPrint (buildNumber)
    fPrint(artifactJarFile)
    if buildNumber is None:
        doDeploy(environment, jobName, None, workspace, artifactJarFile)
    else:
        doDeploy(environment, jobName, buildNumber, workspace, artifactJarFile)

if __name__ == '__main__':
    main()